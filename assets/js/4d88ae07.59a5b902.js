"use strict";(self.webpackChunkhyperfy_docs=self.webpackChunkhyperfy_docs||[]).push([[1854],{8161:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var s=n(4848),o=n(8453);const i={sidebar_position:30},r="Web3",a={id:"developers/web3",title:"Web3",description:"Developers have the ability to build crypto enabled experiences right into their world. The useEth() hook makes it super easy to interact with the blockchain and dApps right inside your virtual world.",source:"@site/docs/developers/web3.md",sourceDirName:"developers",slug:"/developers/web3",permalink:"/hyperfy-docs/docs/developers/web3",draft:!1,unlisted:!1,editUrl:"https://github.com/madjin/hyperfy-docs/tree/main/docs/developers/web3.md",tags:[],version:"current",lastUpdatedBy:"madjin",lastUpdatedAt:1711318803e3,sidebarPosition:30,frontMatter:{sidebar_position:30},sidebar:"developers",previous:{title:"SECRETS",permalink:"/hyperfy-docs/docs/developers/secrets"},next:{title:"<app>",permalink:"/hyperfy-docs/docs/developers/components/app"}},c={},l=[];function d(e){const t={a:"a",code:"code",h1:"h1",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"web3",children:"Web3"}),"\n",(0,s.jsx)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/gzSIk9vKsPg",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0}),"\n",(0,s.jsxs)(t.p,{children:["Developers have the ability to build crypto enabled experiences right into their world. The ",(0,s.jsx)(t.code,{children:"useEth()"})," hook makes it super easy to interact with the blockchain and dApps right inside your virtual world."]}),"\n",(0,s.jsxs)(t.p,{children:["Supported networks: ",(0,s.jsx)(t.code,{children:"ethereum"}),", ",(0,s.jsx)(t.code,{children:"optimism"}),", ",(0,s.jsx)(t.code,{children:"arbitrum"}),", ",(0,s.jsx)(t.code,{children:"polygon"}),", ",(0,s.jsx)(t.code,{children:"goerli"})]}),"\n",(0,s.jsx)(t.p,{children:"The following example demonstrates this functionality using simple cubes that you can click on:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["The ",(0,s.jsx)(t.code,{children:"white"})," cube will fetch the number of NFTs owned by the user."]}),"\n",(0,s.jsxs)(t.li,{children:["The ",(0,s.jsx)(t.code,{children:"blue"})," cube will mint an NFT on the same contract and wait for it to be confirmed on the chain."]}),"\n",(0,s.jsxs)(t.li,{children:["The ",(0,s.jsx)(t.code,{children:"red"})," cube will get the user to sign a message with their wallet."]}),"\n",(0,s.jsxs)(t.li,{children:["The ",(0,s.jsx)(t.code,{children:"green"})," cube will request the user to make a payment."]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:'import React, { useMemo, useState } from "react";\n// highlight-next-line\nimport { useEth } from "hyperfy";\n\nconst CONTRACT = "0x000...";\nconst MINT_PRICE = "0.06";\nconst PAYEE = "0x000...";\n\nexport function EthCubes() {\n// highlight-next-line\n  const eth = useEth(); // defaults to ethereum network\n// highlight-next-line\n  const contract = useMemo(() => eth.contract(CONTRACT), []);\n  const [status, setStatus] = useState(null);\n\n  async function getBalance(e) {\n    const { address } = e.avatar;\n    if (!address) return setStatus("Not connected!");\n    setStatus("Checking...");\n// highlight-next-line\n    const balance = await contract.read("balanceOf", address);\n    setStatus(`Balance: ${balance}`);\n  }\n\n  async function mint(e) {\n    const { address } = e.avatar;\n    if (!address) return setStatus("Not connected!");\n    setStatus("Please confirm transaction");\n// highlight-start\n    const tx = await contract.write("mint", 1, {\n      value: eth.toWei(MINT_PRICE),\n    });\n// highlight-end\n    setStatus("Verifying...");\n    await tx.wait();\n    setStatus("Minted!");\n  }\n\n  async function sign(e) {\n    const { address } = e.avatar;\n    if (!address) return setStatus("Not connected!");\n    setStatus("Please sign message");\n// highlight-next-line\n    const signature = await eth.sign("Howdy!");\n    setStatus("Signed!");\n  }\n\n  async function pay(e) {\n    const { address } = e.avatar;\n    if (!address) return setStatus("Not connected!");\n    setStatus("Please confirm payment");\n// highlight-next-line\n    const tx = await eth.pay(PAYEE, eth.toWei("0.01"));\n    setStatus("Verifying...");\n    await tx.wait();\n    setStatus("Paid!");\n  }\n\n  return (\n    <>\n      {status && <text color="white" value={status} position={[0, 1.5, 0]} />}\n      <box\n        color="white"\n        size={0.5}\n        position={[-0.9, 1, 0]}\n        onPointerDown={getBalance}\n      />\n      <box\n        color="blue"\n        size={0.5}\n        position={[-0.3, 1, 0]}\n        onPointerDown={mint}\n      />\n      <box color="red" size={0.5} position={[0.3, 1, 0]} onPointerDown={sign} />\n      <box\n        color="green"\n        size={0.5}\n        position={[0.9, 1, 0]}\n        onPointerDown={pay}\n      />\n    </>\n  );\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Learn more in the ",(0,s.jsx)(t.a,{href:"/docs/developers/hooks/use-eth",children:"useEth()"})," API reference."]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var s=n(6540);const o={},i=s.createContext(o);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);